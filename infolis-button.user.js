// ==UserScript==
// @name         Infolis Button
// @namespace    kba
// @version      0.2016-08-15T18:45:58+02:00
// @description  try to take over the world!
// @author       You
// @match        */*
// @downloadURL  http://localhost:8080/infolis-button.user.js

// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_xmlhttpRequest
// @grant        GM_registerMenuCommand
// @grant        GM_log
// @grant        GM_getResourceText
// @grant        GM_getResourceURL

// require      https://openuserjs.org/src/libs/sizzle/GM_config.js
// @require      https://raw.githubusercontent.com/sizzlemctwizzle/GM_config/master/gm_config.js
// @require      https://code.jquery.com/jquery-2.2.0.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/async/1.5.2/async.js
// @require      https://raw.githubusercontent.com/olado/doT/master/doT.js
// @require      https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js
// @require      http://localhost:8080/scoped.js

// @resource     infolis_logo.png https://raw.githubusercontent.com/infolis/infolis.github.io/master/img/logo-circle.png

// @resource     marx.css https://cdn.rawgit.com/mblode/marx/master/css/marx.min.css
// @resource     font-awesome.css https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css
// @resource     bootstrap.css https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css
// @resource     animate.css https://raw.githubusercontent.com/daneden/animate.css/master/animate.css
// @resource     infolis.css http://localhost:8080/infolis.css

// @resource     site_button.html http://localhost:8080/tpl/site_button.html

// ==/UserScript==
/* jshint esversion: 6, white: true, -W097, forin: true */
/* globals window */
/* globals doT */
/* globals $ */
/* globals jQuery */
/* globals console */
/* globals scopedPolyFill */
/* globals GM_config */
/* globals GM_xmlhttpRequest */
/* globals GM_registerMenuCommand */
/* globals document */
/* globals GM_getResourceText */
/* globals setTimeout */
/* globals async */
// Generated by CoffeeScript 1.10.0
var BUTTON_DATA_API, CONFIG_CSS, CONFIG_FRAME_STYLE, EntityInDOM, SCOPED_CSS, SCRIPT_ID, ZOTERO_API;

console.log('start infolis user.js');

EntityInDOM = (function() {
  function EntityInDOM() {}

  return EntityInDOM;

})();

SCRIPT_ID = 'InfolisButtonConfig';

ZOTERO_API = 'https://www-test.bib.uni-mannheim.de/infolis/zotero/';

BUTTON_DATA_API = 'https://www-test.bib.uni-mannheim.de/infolis/infolis-button-db';

CONFIG_CSS = "SCRIPT_ID {\n	color: white;\n	background:\n	linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ),\n	url(https://raw.githubusercontent.com/infolis/infolis.github.io/master/img/visualize-links_01.png) ;\n}\nSCRIPT_ID textarea { font-family: monospace; }\nSCRIPT_ID h2,h3 { text-align: center; }\nSCRIPT_ID input[type=\"text\"] { font-family: monospace; }".replace(/SCRIPT_ID/gm, "#" + SCRIPT_ID);

CONFIG_FRAME_STYLE = "bottom: auto;\nborder: 1px solid #000;\ndisplay: none;\nheight: 75%;\ntop: 50px;\nleft: 20px;\nbottom: 50px;\nmargin: 0;\nmax-height: 95%;\nwidth: 90%;\noverflow: auto;\npadding: 0;\nposition: fixed;\nright: auto;\nz-index: 9999;\nopacity: 1".replace(/\n\s*/g, ';');

SCOPED_CSS = "<style scoped>\n	* {\n		margin: 0;\n		padding: 0;\n		border: 0;\n		/*background: initial;*/\n		/*color: initial;*/\n	}\n	" + (GM_getResourceText('animate.css')) + "\n	" + (GM_getResourceText('marx.css')) + "\n	" + (GM_getResourceText('bootstrap.css')) + "\n	" + (GM_getResourceText('infolis.css')) + "\n</style>";
// Generated by CoffeeScript 1.10.0

/*
 * Simple Database
 */
var SimpleApi;

SimpleApi = function() {};

SimpleApi.prototype.get = function(coll, id, cb) {
  console.log('yay');
  return GM_xmlhttpRequest({
    method: 'GET',
    url: BUTTON_DATA_API + '/' + coll + '?identifier=' + id,
    onload: function(response) {
      var pub;
      if (response.status !== 200) {
        return cb(response.status);
      }
      pub = JSON.parse(response.responseText);
      return async.each(['datasets', 'databases'], (function(coll, doneColl) {
        return async.map(pub[coll] || [], (function(id, doneId) {
          return DB.get(coll, id, doneId);
        }), function(err, instantiated) {
          if (!err && instantiated.length) {
            pub[coll] = instantiated;
          }
          return doneColl(err);
        });
      }), function(err) {
        return cb(null, pub);
      });
    }
  });
};
// Generated by CoffeeScript 1.10.0

/*
 * CSS for config dialog
 */

/*
 * Config values
 */
GM_config.init({
  id: SCRIPT_ID,
  title: 'Configure InfolisButton',
  fields: {
    auto_activate: {
      label: 'Activate on page load?',
      type: 'checkbox',
      "default": false
    },
    auto_fetch: {
      label: 'Automatically fetch after activating?',
      type: 'checkbox',
      "default": false
    },
    bad_databases: {
      label: 'Low Priority databases',
      type: 'textarea',
      rows: 4,
      "default": ['yahoo'].join('\n')
    },
    good_databases: {
      label: 'High Priority databases',
      type: 'textarea',
      rows: 4,
      "default": ['bloomberg', 'gfd'].join('\n')
    },
    regex_doi: {
      'label': 'DOI Regex',
      'type': 'text',
      'default': '\\b(10\\.[0-9]{4,}/[^\\s&"\']*[^\\s&"\'.,])\\b'
    }
  },
  events: {
    open: function(configDocument, configWindow) {
      var DOLLAR;
      this.frame.setAttribute('style', CONFIG_FRAME_STYLE);
      configDocument.addEventListener('keydown', function(e) {
        if (e.which === 27) {
          return GM_config.close();
        }
      });
      DOLLAR = function(arg) {
        return $(arg, configDocument);
      };
      DOLLAR('style').html(CONFIG_CSS);
      DOLLAR('head').append($('<link rel=\'stylesheet\'>').attr('href', 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css')).append($('<script>').attr('src', 'http://code.jquery.com/jquery-latest.js')).append($('<script>').attr('src', 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js'));
      DOLLAR('body > div > div:last-child').attr('style', 'position:fixed; right:0; top: 0;');
      DOLLAR('div.config_header').html($('<div class=\'col-sm-12\'>').append($('<h2>').html(DOLLAR('div.config_header').html())));
      DOLLAR('div.section_header').hide();
      DOLLAR('.config_var').each(function() {
        DOLLAR(this).html($('<div class=\'form-group\'>').append($('<div class="col-sm-3">').append($('label', this))).append($('<div class="col-sm-9">').append($('*:last-child', this))));
        return DOLLAR(this).append($('<div style=\'clear:both\'>'));
      });
      DOLLAR('body > div').addClass('container');
      DOLLAR('button[id$=\'closeBtn\']').remove();
      DOLLAR('a.reset').remove();
      DOLLAR('textarea,input').addClass('form-control');
      DOLLAR('button').addClass('btn btn-lg btn-success').text('Save');
      DOLLAR('button').on('click tap', GM_config.close.bind(GM_config));
      $('body').one('click tap', GM_config.close.bind(GM_config));
      DOLLAR('body').append('<a id="restart-zotero-backend" class="btn btn-danger">Reset</a>');
      return DOLLAR('#restart-zotero-backend').on('click tap', function() {
        return GM_xmlhttpRequest({
          method: 'GET',
          url: ZOTERO_API + '/restart',
          onload: function(response) {
            console.warn(response);
            return console.warn('Notified zotero backend!');
          }
        });
      });
    }
  }
});
// Generated by CoffeeScript 1.10.0

/**
 * Key bindings
 *
 */
var addKeybindings;

addKeybindings = function() {
  return document.addEventListener('keydown', function(e) {
    if (e.which === 27) {
      if (GM_config.frame) {
        GM_config.close();
      }
      SITE_BUTTON.unexpandAll();
      SITE_BUTTON.disableFilter();
      return $('#citation-window').hide();
    } else if (e.which === 'C'.charCodeAt(0) && e.altKey === true) {
      return SITE_BUTTON.clickConfig();
    } else if (e.which === 'B'.charCodeAt(0) && e.altKey === true) {
      return SITE_BUTTON.clickFetch();
    } else if (e.which === 'V'.charCodeAt(0) && e.altKey === true) {
      return $('.infolis-button').hide();
    } else if (e.which === 'M'.charCodeAt(0) && e.altKey === true) {
      return SITE_BUTTON.toggleFilter();
    } else if (e.which === 'N'.charCodeAt(0) && e.altKey === true) {
      if (window.confirm('Really nuke the config?')) {
        GM_config.fields.forEach(function(id) {
          return GM_config.fields[id].value = GM_config.fields[id]["default"];
        });
        return GM_config.write();
      }
    }
  });
};
// Generated by CoffeeScript 1.10.0

/**
 * InfolisButton
 *
 * button_types:
 *   - landing-page
 *   - result-list
 *   - result-list-item
 *
 * statuses:
 *   - inactive
 *   - ready
 *   - working
 *   - fail
 *   - win
 */
var InfolisButton;

InfolisButton = (function() {
  function InfolisButton(opts) {
    var $css, appendContainer, highlightContainer;
    this.button_type = opts.button_type;
    appendContainer = opts.appendContainer || 'body';
    highlightContainer = opts.highlightContainer || appendContainer;
    this.parent_button = opts.parent_button;
    this.href = opts.href || window.location.href.replace(/#.*/, '');
    this.$appendContainer = $(appendContainer);
    this.$highlightContainer = $(highlightContainer);
    this.$el = $('<div>').appendTo(this.$appendContainer);
    $css = $(SCOPED_CSS)[0];
    this.$el.prepend($css);
    scopedPolyFill($css);
    this.$el.append('<div class=\'infolis-button\'>');
    this.renderCount = 0;
    this.status = 'inactive';
    this.expanded = false;
    this.results = [];
    this.databases = [];
    this.publications = [];
    this.primary_data = [];
    this.datasets = [];
    this.error_message = void 0;
    this.flag_fetched = false;
    this.resultClass = null;
  }

  InfolisButton.prototype.setStatus = function(status, message, cb) {
    this.status = status;
    if (message) {
      this.error_message = message;
    }
    this.renderPartially();
    if (cb) {
      return cb(message);
    }
  };

  InfolisButton.prototype.show = function() {
    if (this.hidden) {
      this.$highlightContainer.fadeIn();
    }
    return this.hidden = false;
  };

  InfolisButton.prototype.hide = function() {
    if (!this.hidden) {
      this.$highlightContainer.fadeOut();
    }
    return this.hidden = true;
  };

  InfolisButton.prototype.prioritize = function() {
    var i;
    var bad, bad_databases, good, good_databases, i, results;
    bad_databases = GM_config.get('bad_databases').split(/\n/);
    i = 0;
    while (i < bad_databases.length) {
      bad = bad_databases[i];
      if (this.databases.indexOf(bad) >= 0) {
        this.$highlightContainer.css('opacity', '0.5');
        this.$highlightContainer.css('background', '#ccc');
      }
      i++;
    }
    good_databases = GM_config.get('good_databases').split(/\n/);
    i = 0;
    results = [];
    while (i < good_databases.length) {
      good = good_databases[i];
      if (this.databases.indexOf(good) >= 0) {
        this.$highlightContainer.css('border', '3px dotted green ');
        this.$highlightContainer.css('background', '#efe ');
      }
      results.push(i++);
    }
    return results;
  };

  InfolisButton.prototype.list = function(coll) {
    var ret;
    ret = [];
    if (coll === 'publications') {
      ret = this.publications.slice(0);
    } else {
      this.publications.forEach(function(pub) {
        if (!pub[coll]) {
          return;
        }
        return pub[coll].forEach(function(data) {
          return ret.push(data);
        });
      });
    }
    this.results || (this.results = []);
    this.results.forEach(function(result) {
      return result.button.list(coll).forEach(function(childData) {
        return ret.push(childData);
      });
    });
    return ret;
  };

  InfolisButton.prototype.number_found = function() {
    var nr;
    nr = 0;
    ['databases', 'datasets'].forEach((function(_this) {
      return function(coll) {
        return nr += _this.list(coll).length;
      };
    })(this));
    return nr;
  };

  InfolisButton.prototype.fetchDOI = function(done) {
    var doi;
    doi = matchCOinS_rft_dat(this.$highlightContainer.html());
    if (doi) {
      console.debug('Found DOI in Primo COinS:', doi);
      return done(null, [doi]);
    }
    doi = matchWiso(this.$highlightContainer.html());
    if (doi) {
      console.debug('Found DOI in Wiso:', doi);
      return done(null, [doi]);
    }
    if (!this.href) {
      doi = matchDOI(this.$highlightContainer.html());
      if (doi) {
        console.debug('Found DOI in containing element: ', doi);
        return done(null, [doi]);
      }
      if (!this.href) {
        console.error('Cannot determine DOI without a URI.');
        return done('Cannot determine DOI without a URI.');
      }
    }
    doi = matchDOI(this.href);
    if (doi) {
      console.debug('Found DOI in URL:', [doi]);
      return done(null, [doi]);
    } else {
      return GM_xmlhttpRequest({
        method: 'GET',
        url: ZOTERO_API + '?format=doi&url=' + this.href,
        onload: function(response) {
          if (response.status !== 200) {
            console.error(response.status);
            return done(response.status);
          }
          console.debug('Found DOI by scraping', response.responseText);
          return done(null, [response.responseText]);
        }
      });
    }
  };

  InfolisButton.prototype.fetch = function(cbFetch) {
    if (this.flag_fetched) {
      return cbFetch(null, 'Already fetched');
    }
    this.flag_fetched = true;
    if (this.button_type === 'result-list') {
      this.setStatus('working');
      return async.each(this.results, function(result, done) {
        console.log(result);
        if (result.button.flag_fetched) {
          return done();
        }
        return result.button.activate(function() {
          return result.button.fetch(done);
        });
      }, (function(_this) {
        return function() {
          _this.setStatus('ok');
          _this.render();
          return cbFetch(null, 'Fetched all results');
        };
      })(this));
    } else {
      this.setStatus('working');
      return this.fetchDOI((function(_this) {
        return function(err, dois) {
          var instantiated;
          if (err) {
            _this.setStatus('fail', 'No DOI : ' + err);
            return cbFetch('Can\'t fetch data without a DOI.');
          }
          instantiated = [];
          return async.eachSeries(dois, (function(pubId, donePub) {
            return DB.get('publications', pubId, function(err, pub) {
              if (err) {
                _this.setStatus('fail', 'Failed to download publication data: ' + err);
              } else {
                _this.setStatus('ok');
                instantiated.push(pub);
              }
              return donePub();
            });
          }), function(err) {
            _this.publications = instantiated;
            _this.render();
            return cbFetch(null, 'fetched list items');
          });
        };
      })(this));
    }
  };

  InfolisButton.prototype.activate = function(cbActivate) {
    if (this.status !== 'inactive') {
      return cbActivate(null, 'Already activated');
    }
    this.render();
    this.setStatus('working');
    if (this.button_type === 'result-list') {
      this.results = [];
      return this.resultClass.activateResults(this, (function(_this) {
        return function(result, cbResult) {
          _this.results.push(result);
          return result.button.activate(cbResult);
        };
      })(this), (function(_this) {
        return function() {
          _this.setStatus('ready');
          return cbActivate(null, 'Activated all results');
        };
      })(this));
    } else {
      this.setStatus('ready');
      return cbActivate(null, 'Activated');
    }
  };

  InfolisButton.prototype.unexpandAll = function() {
    SITE_BUTTON.expanded = false;
    SITE_BUTTON.results.forEach(function(result) {
      result.button.expanded = false;
      return result.button.renderPartially();
    });
    return SITE_BUTTON.renderPartially();
  };

  InfolisButton.prototype.unexpand = function() {
    this.expanded = true;
    return this.toggleExpanded();
  };

  InfolisButton.prototype.toggleExpanded = function() {
    var wasExpanded;
    wasExpanded = this.expanded;
    this.unexpandAll();
    this.expanded = !wasExpanded;
    this.renderPartially();
    return LOG(null, 'toggled menu');
  };

  InfolisButton.prototype.clickFetch = function() {
    console.debug('Fetching');
    return this.activate((function() {
      return this.fetch(LOG);
    }).bind(this));
  };

  InfolisButton.prototype.clickLogo = function() {
    if (this.status === 'inactive') {
      return this.activate(LOG);
    } else if (this.status === 'ready') {
      return this.fetch(LOG);
    } else {
      return this.toggleExpanded();
    }
  };

  InfolisButton.prototype.clickQuit = function() {
    return $('style[scoped]').parent().remove();
  };

  InfolisButton.prototype.clickConfig = function() {
    this.unexpandAll();
    return GM_config.open();
  };

  InfolisButton.prototype.toggleFilter = function() {
    if (FILTER.enabled) {
      return this.disableFilter();
    } else {
      return this.enableFilter();
    }
  };

  InfolisButton.prototype.enableFilter = function() {
    FILTER.enabled = true;
    this.unexpandAll();
    $('#infolis-filterbox').slideDown();
    $('#filter-input').focus();
    return this.updateFilter();
  };

  InfolisButton.prototype.disableFilter = function() {
    FILTER.enabled = false;
    this.updateFilter();
    $('#filter-input').val('');
    return $('#infolis-filterbox').slideUp();
  };

  InfolisButton.prototype.updateFilter = function() {
    FILTER.text = new RegExp('.*' + $('#filter-input').val() + '.*', 'i');
    FILTER.databases = $('#filter-databases').is(':checked');
    FILTER.datasets = $('#filter-datasets').is(':checked');
    SITE_BUTTON.results.forEach(function(result, idx) {
      var coll, hidden;
      if (!FILTER.enabled) {
        return result.button.show();
      }
      coll = void 0;
      hidden = false;
      if (FILTER.databases && !result.button.list('databases').length) {
        hidden = true;
      }
      if (FILTER.datasets && !result.button.list('datasets').length) {
        hidden = true;
      }
      if (!hidden && FILTER.text) {
        hidden = true;
        ['databases', 'datasets'].forEach(function(coll) {
          return result.button.list(coll).forEach(function(data) {
            if (FILTER.text.test(data.identifier) || FILTER.text.test(data.title)) {
              return hidden = false;
            }
          });
        });
      }
      if (hidden) {
        return result.button.hide();
      } else {
        return result.button.show();
      }
    });
    return SITE_BUTTON.renderPartially();
  };

  InfolisButton.prototype.renderPartially = function() {
    var total, visible;
    if (this.button_type === 'result-list-item') {
      this.$el.css('margin-top', '20px');
      this.$el.css('z-index', '99999');
      this.$el.css('overflow', 'visible');
      this.$el.css('min-width', '64px');
      this.$el.css('float', 'left');
      this.prioritize();
    }
    if (this === SITE_BUTTON) {
      total = this.results.length;
      visible = total;
      this.results.forEach(function(result) {
        if (result.button.hidden) {
          return visible -= 1;
        }
      });
      $('#filter-status').html(visible + ' / ' + total);
    }
    if (this.error_message) {
      $('.infolis-error', this.$el).html(this.error_message).toggle(true);
    }
    $('.infolis-menu:first', this.$el).toggleClass('hidden', !this.expanded);
    $('.infolis-button:first', this.$el).toggleClass('expanded', this.expanded);
    $('.infolis-button:first', this.$el).addClass('infolis-' + this.button_type);
    $('.infolis-logo:first', this.$el).attr('data-infolis-number', this.number_found());
    $('.infolis-button:first', this.$el).attr('data-infolis-status', this.status);
    $('span.infolis-status', this.$el).html(this.status);
    $('#btn-fetch-all', this.$el).toggleClass('hidden', this.flag_fetched || this.button_type !== 'result-list');
    $('#filter-toggle', this.$el).toggleClass('hidden', this.button_type !== 'result-list');
    $('.infolis-result-length', this.$el).toggleClass('hidden', this.button_type !== 'result-list');
    $('.infolis-button-group', this.$el).toggleClass('hidden', this.button_type === 'result-list-item');
    $('.infolis-row-databases', this.$el).toggleClass('hidden', this.list('databases').length === 0);
    $('.infolis-row-datasets', this.$el).toggleClass('hidden', this.list('datasets').length === 0);
    return $('.infolis-row-publications', this.$el).toggleClass('hidden', this.list('publications').length === 0);
  };

  InfolisButton.prototype.render = function() {
    $('div.infolis-button', this.$el).replaceWith(tpl('site_button', this));
    if (this.number_found() > 0) {
      $('.infolis-logo:not(.expanded):first', this.$el).addClass('animated wobble').one('animationend', function() {
        return $(this).removeClass('animated wobble');
      });
    }
    this.renderPartially();
    $('.infolis-logo:first', this.$el).on('click tap', this.clickLogo.bind(this));
    $('#btn-fetch-all', this.$el).on('click tap', this.clickFetch.bind(this));
    $('#btn-quit', this.$el).on('click tap', this.clickQuit.bind(this));
    $('#btn-config', this.$el).on('click tap', this.clickConfig.bind(this));
    $('#filter-toggle', this.$el).on('click tap', this.toggleFilter.bind(this));
    $('#filter-clear', this.$el).on('click tap', this.disableFilter.bind(this));
    $('#filter-input', this.$el).on('keyup', this.updateFilter.bind(this));
    $('input[type=\'checkbox\']', this.$el).on('change', this.updateFilter.bind(this));
    $('.filter-preset').on('click tap', function() {
      var collection, id;
      collection = $(this).closest('*[data-collection]').attr('data-collection');
      id = $(this).closest('*[data-collection]').attr('data-id');
      SITE_BUTTON.enableFilter();
      $('#infolis-filterbox input[type=\'text\']').val(id);
      $('input[type=\'checkbox\']').prop('checked', false);
      $('#filter-' + collection).prop('checked', true);
      return SITE_BUTTON.updateFilter();
    });
    $('.infolis-menu:first .toggle-group', this.$el).each(function() {
      var group;
      group = this;
      return $(group).find('.toggle-source').on('click tap', function() {
        return $('.toggle-target', group).animate({
          'opacity': 'toggle',
          'width': 'toggle'
        }, 100);
      });
    });
    return $('.export', this.$el).on('click tap', function() {
      var collection, format, id;
      format = $(this).attr('data-export');
      collection = $(this).closest('*[data-collection]').attr('data-collection');
      id = $(this).closest('*[data-collection]').attr('data-id');
      return DB.get(collection, id, function(err, entry) {
        if (entry) {
          SITE_BUTTON.unexpandAll();
          return $('#citation-window').append($('<pre>').html(htmlEncode(entry['citation_' + format] ? entry['citation_' + format] : JSON.stringify(entry, null, 2)))).show();
        }
      });
    });
  };

  return InfolisButton;

})();
// Generated by CoffeeScript 1.10.0

/**
 * Google Scholar result
 *
 */
var GoogleScholarResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GoogleScholarResult = (function(superClass) {
  extend(GoogleScholarResult, superClass);

  function GoogleScholarResult(el, parent) {
    this.$el = $(el);
    this.button = new InfolisButton({
      button_type: 'result-list-item',
      appendContainer: $('.gs_rt', this.$el),
      highlightContainer: this.$el,
      parent_button: parent,
      href: $('.gs_rt a[href]', this.$el).attr('href')
    });
  }

  GoogleScholarResult.matchLocation = function() {
    return window.location.hostname.startsWith('scholar.google') || window.location.pathname.indexOf('Scholar') > -1;
  };

  GoogleScholarResult.activateResults = function(parent, eachCB, doneCB) {
    return async.each($('.gs_r').get(), function(elem, cbResult) {
      var result;
      result = new GoogleScholarResult(elem, parent);
      return eachCB(result, cbResult);
    }, doneCB);
  };

  return GoogleScholarResult;

})(EntityInDOM);
// Generated by CoffeeScript 1.10.0

/**
 * Primo result
 *
 */
var PrimoResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PrimoResult = (function(superClass) {
  extend(PrimoResult, superClass);

  PrimoResult.matchLocation = function() {
    return window.location.hostname.startsWith('primo.bib.uni-mannheim.de') || /primo/.test(window.location.hostname);
  };

  PrimoResult.activateResults = function(parent, eachCB, doneCB) {
    return async.each($('.EXLResult').get(), function(elem, cbResult) {
      var result;
      result = new PrimoResult(elem, parent);
      return eachCB(result, cbResult);
    }, doneCB);
  };

  function PrimoResult(el, parent) {
    this.$el = $(el);
    this.button = new InfolisButton({
      button_type: 'result-list-item',
      appendContainer: $('.EXLResultNumber', this.$el),
      highlightContainer: this.$el,
      parent_button: parent,
      href: $('.gs_rt a[href]', this.$el).attr('href')
    });
  }

  return PrimoResult;

})(EntityInDOM);
// Generated by CoffeeScript 1.10.0
var LOG, addCSS, addJS, addStyle, htmlEncode, matchCOinS_rft_dat, matchDOI, matchWiso, tpl;

LOG = function() {
  if (arguments[0]) {
    return console.error(arguments[0]);
  } else if (arguments[1]) {
    return console.info(arguments[1]);
  }
};


/**
 * Find links to PDF
 *
 */

matchDOI = function(str) {
  var doiMatch, re;
  re = new RegExp(GM_config.get('regex_doi'));
  doiMatch = str.match(re);
  if (doiMatch) {
    return doiMatch[1].replace(/(\/full|\/pdf|\/abstract|;jsessionid.*)*(\?.*)?$/, '');
  }
};

matchCOinS_rft_dat = function(str) {
  var doiMatch, re;
  re = /rft_dat=<wiso>([^,]*)<\/wiso>,/;
  doiMatch = str.match(re);
  if (doiMatch) {
    return doiMatch[1];
  }
};

matchWiso = function(str) {
  if (window.location.href.match('wiso-net')) {
    return 'ZAAA2005110027513181411142812171';
  }
};


/**
 * Template function
 */

htmlEncode = function(value) {
  return $('<div/>').text(value).html();
};

tpl = function(name, data) {
  var dot, html;
  dot = GM_getResourceText(name + '.html');
  console.log(data);
  data.GM_config = GM_config;
  html = $(doT.template(dot)(data));
  return html;
};


/**
 * Inject stylesheets
 *
 */

addStyle = function(rule) {
  var style;
  style = $('#infolis-userjs-style');
  if (style.length === 0) {
    style = $('<style id=\'infolis-userjs-style\'/>');
    $('head').append(style);
  }
  return style.append(rule);
};

addJS = function(name) {
  var script;
  script = document.createElement('script');
  script.type = 'text/javascript';
  script.text = GM_getResourceText(name);
  return document.head.appendChild(script);
};

addCSS = function(name) {
  var link;
  link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = name;
  return document.head.insertBefore(link, document.head.firstChild);
};
// Generated by CoffeeScript 1.10.0
'use strict';
var FILTER, SITE_BUTTON, STATUSES, main;

this.$ = this.jQuery = jQuery.noConflict(true);


/*
 *
 * http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0117619
 *
 */

SITE_BUTTON = void 0;

STATUSES = ['inactive', 'ready', 'working', 'ok', 'fail'];

FILTER = {
  enabled: false,
  text: ''
};


/**
 * Main
 *
 */

main = function() {
  window.DB = new SimpleApi(JSON.parse(GM_getResourceText('data.json')));
  addJS('scoped.js');
  addCSS('https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css');
  addCSS('https://jpswalsh.github.io/academicons/css/academicons.min.css');
  GM_registerMenuCommand('Configure InfolisButton', GM_config.open.bind(GM_config), 'c');
  addKeybindings();
  SITE_BUTTON = new InfolisButton({});
  if (GoogleScholarResult.matchLocation()) {
    SITE_BUTTON.button_type = 'result-list';
    SITE_BUTTON.resultClass = GoogleScholarResult;
  } else if (PrimoResult.matchLocation()) {
    SITE_BUTTON.button_type = 'result-list';
    SITE_BUTTON.resultClass = PrimoResult;
  } else {
    SITE_BUTTON.button_type = 'landing-page';
  }
  SITE_BUTTON.$el.append($('<div id=\'citation-window\'>').hide());
  SITE_BUTTON.render();
  if (GM_config.get('auto_activate')) {
    SITE_BUTTON.clickLogo();
    if (GM_config.get('auto_fetch')) {
      return SITE_BUTTON.clickFetch();
    }
  }
};

setTimeout(main, 500);
